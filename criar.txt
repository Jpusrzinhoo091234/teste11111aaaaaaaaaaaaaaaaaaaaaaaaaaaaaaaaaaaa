Aqui está um projeto detalhado para você criar um site de login e cadastro usando HTML, CSS, JavaScript e JSON. O fluxo inclui o frontend para as páginas de login e cadastro, além de salvar e verificar os dados dos usuários com o arquivo users.json.

Estrutura do Projeto
A estrutura básica do projeto é a seguinte:

bash
Copiar
Editar
/login-cadastro-site
├── index.html             # Página de Login e Cadastro
├── style.css              # Arquivo de estilo (CSS)
├── script.js              # Lógica JavaScript
├── users.json             # Arquivo de dados dos usuários
├── netlify/functions      # Funções backend (caso use serverless no Netlify)
│   ├── login.js           # Função de login
│   └── register.js        # Função de cadastro
├── netlify.toml           # Arquivo de configuração do Netlify
└── README.md              # Descrição do projeto
Passo 1: HTML (index.html)
Aqui está o código do arquivo index.html com os formulários de login e cadastro.

html
Copiar
Editar
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login e Cadastro</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="app">
        <!-- Formulário de Login -->
        <div class="form-container" id="loginForm">
            <h2>Login</h2>
            <form id="login">
                <input type="email" id="loginEmail" placeholder="E-mail" required>
                <input type="password" id="loginPassword" placeholder="Senha" required>
                <button type="submit">Entrar</button>
            </form>
            <button id="showRegister">Não tem uma conta? Registre-se</button>
        </div>

        <!-- Formulário de Cadastro -->
        <div class="form-container" id="registerForm" style="display:none;">
            <h2>Cadastro</h2>
            <form id="register">
                <input type="text" id="registerName" placeholder="Nome" required>
                <input type="email" id="registerEmail" placeholder="E-mail" required>
                <input type="password" id="registerPassword" placeholder="Senha" required>
                <button type="submit">Registrar</button>
            </form>
            <button id="showLogin">Já tem uma conta? Faça login</button>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>
Passo 2: CSS (style.css)
Aqui estão alguns estilos básicos para o formulário e a interface:

css
Copiar
Editar
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f9;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

#app {
    background: white;
    padding: 20px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    width: 300px;
}

.form-container {
    display: flex;
    flex-direction: column;
}

input {
    margin-bottom: 10px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

button {
    padding: 10px;
    background-color: #5c6bc0;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #3f51b5;
}
Passo 3: JavaScript (script.js)
Aqui está a lógica em JavaScript para alternar entre os formulários de login e cadastro, além de fazer as requisições para o backend para salvar e verificar os usuários.

javascript
Copiar
Editar
document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('login');
    const registerForm = document.getElementById('register');
    const showRegister = document.getElementById('showRegister');
    const showLogin = document.getElementById('showLogin');
    const forms = document.querySelectorAll('.form-container');

    // Exibir formulário de cadastro
    showRegister.addEventListener('click', function(e) {
        e.preventDefault();
        forms[0].style.display = 'none';
        forms[1].style.display = 'block';
    });

    // Exibir formulário de login
    showLogin.addEventListener('click', function(e) {
        e.preventDefault();
        forms[1].style.display = 'none';
        forms[0].style.display = 'block';
    });

    // Lógica de login
    loginForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const email = document.getElementById('loginEmail').value;
        const password = document.getElementById('loginPassword').value;

        fetch('/.netlify/functions/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password })
        })
        .then(response => response.json())
        .then(data => {
            if (data.message === 'Login bem-sucedido!') {
                alert('Login realizado com sucesso!');
                // Redirecionar ou mostrar conteúdo protegido
            } else {
                alert(data.message);
            }
        })
        .catch(error => console.error('Erro ao realizar login:', error));
    });

    // Lógica de cadastro
    registerForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const name = document.getElementById('registerName').value;
        const email = document.getElementById('registerEmail').value;
        const password = document.getElementById('registerPassword').value;

        fetch('/.netlify/functions/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, email, password })
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
            if (data.message === 'Cadastro realizado com sucesso!') {
                forms[1].style.display = 'none';
                forms[0].style.display = 'block';
            }
        })
        .catch(error => console.error('Erro ao cadastrar usuário:', error));
    });
});
Passo 4: Funções Serverless no Netlify (Backend)
Você pode usar o Netlify Functions para criar funções backend que irão tratar o login e o cadastro. As funções serverless ficam na pasta netlify/functions e são automaticamente acessíveis através de /netlify/functions/.

Função de Login (login.js):
javascript
Copiar
Editar
// netlify/functions/login.js
const fs = require('fs');

exports.handler = async (event) => {
    const { email, password } = JSON.parse(event.body);
    const users = JSON.parse(fs.readFileSync('users.json', 'utf8'));

    const user = users.find(user => user.email === email && user.password === password);

    if (user) {
        return {
            statusCode: 200,
            body: JSON.stringify({ message: 'Login bem-sucedido!' })
        };
    } else {
        return {
            statusCode: 401,
            body: JSON.stringify({ message: 'Email ou senha incorretos!' })
        };
    }
};
Função de Cadastro (register.js):
javascript
Copiar
Editar
// netlify/functions/register.js
const fs = require('fs');

exports.handler = async (event) => {
    const { name, email, password } = JSON.parse(event.body);
    const users = JSON.parse(fs.readFileSync('users.json', 'utf8'));

    const userExists = users.some(user => user.email === email);
    if (userExists) {
        return {
            statusCode: 400,
            body: JSON.stringify({ message: 'Este email já está registrado!' })
        };
    }

    const newUser = { name, email, password };
    users.push(newUser);

    fs.writeFileSync('users.json', JSON.stringify(users));

    return {
        statusCode: 200,
        body: JSON.stringify({ message: 'Cadastro realizado com sucesso!' })
    };
};
Passo 5: Arquivo users.json (Banco de Dados Simples)
Aqui está o formato simples do arquivo users.json que armazenará as informações dos usuários.

json
Copiar
Editar
[
    {
        "name": "Admin",
        "email": "admin@teste.com",
        "password": "admin123"
    }
]
Passo 6: Deploy no Netlify
Suba o repositório para o GitHub (ou outra plataforma de versionamento).

Conecte o repositório ao Netlify.

Configure as funções serverless no Netlify para executar o código do backend.

Faça o deploy do projeto para obter a URL pública.

Considerações Finais:
O arquivo users.json armazena os dados dos usuários.

As funções login.js e register.js no Netlify tratam as requisições de login e cadastro.

O frontend em index.html interage com essas funções através de fetch() para enviar e receber dados.

Essa estrutura oferece uma solução simples de login e cadastro com persistência dos dados em um arquivo JSON.